version: '3.8'

services:
  # Main application
  speaking-feedback-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "5001:5001"
    environment:
      - FLASK_ENV=development
      - PORT=5001
      - ZOOM_CLIENT_ID=${ZOOM_CLIENT_ID}
      - ZOOM_CLIENT_SECRET=${ZOOM_CLIENT_SECRET}
      - ZOOM_ACCOUNT_ID=${ZOOM_ACCOUNT_ID}
      - ZOOM_WEBHOOK_SECRET=${ZOOM_WEBHOOK_SECRET}
    volumes:
      - ./zoom_recordings:/app/zoom_recordings
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - speaking-feedback-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - speaking-feedback-network

  # PostgreSQL for production database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=speaking_feedback
      - POSTGRES_USER=speaking_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-speaking_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - speaking-feedback-network

  # MLflow tracking server
  mlflow:
    image: python:3.9-slim
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_TRACKING_URI=sqlite:///mlflow.db
    volumes:
      - mlflow_data:/mlflow
    command: >
      sh -c "pip install mlflow &&
              mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri sqlite:///mlflow.db"
    networks:
      - speaking-feedback-network

  # Triton Inference Server (GPU)
  triton:
    image: nvcr.io/nvidia/tritonserver:23.10-py3
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
    volumes:
      - ./models:/models
    command: tritonserver --model-repository=/models
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - speaking-feedback-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - speaking-feedback-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - speaking-feedback-network

volumes:
  redis_data:
  postgres_data:
  mlflow_data:
  prometheus_data:
  grafana_data:

networks:
  speaking-feedback-network:
    driver: bridge 