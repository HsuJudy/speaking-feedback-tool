name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ========================================
  # CODE QUALITY & TESTING
  # ========================================
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy pytest pytest-cov
        
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Format check with black
      run: |
        black --check --diff .
        
    - name: Import sorting check
      run: |
        isort --check-only --diff .
        
    - name: Type checking with mypy
      run: |
        mypy --ignore-missing-imports --no-strict-optional .
        
    - name: Run tests with pytest
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # ========================================
  # SECURITY SCANNING
  # ========================================
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
        
    - name: Run Safety check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # ========================================
  # ML MODEL TESTING
  # ========================================
  ml-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run ML model tests
      run: |
        python -m pytest test_models.py -v
        python -m pytest test_custom_pipeline.py -v
        python -m pytest test_audio_emotion.py -v
        
    - name: Test Zoom integration
      run: |
        python test_zoom_setup.py
        
    - name: Test MLflow integration
      run: |
        python demo_mlflow_integration.py --test-only
        
    - name: Test DVC workflow
      run: |
        python demo_versioning_workflow.py --test-only

  # ========================================
  # BUILD & PUSH DOCKER IMAGE
  # ========================================
  build-and-push:
    needs: [lint-and-test, security-scan, ml-tests]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ========================================
  # DEPLOY TO STAGING
  # ========================================
  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
        
    - name: Wait for deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl rollout status deployment/speaking-feedback-app -n speaking-feedback --timeout=300s
        
    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        # Wait for service to be ready
        kubectl wait --for=condition=ready pod -l app=speaking-feedback-app -n speaking-feedback --timeout=300s
        # Test health endpoint
        curl -f http://localhost:8080/health || exit 1

  # ========================================
  # DEPLOY TO PRODUCTION
  # ========================================
  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
        
    - name: Wait for deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl rollout status deployment/speaking-feedback-app -n speaking-feedback --timeout=300s
        
    - name: Run production tests
      run: |
        export KUBECONFIG=kubeconfig
        # Test all endpoints
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:8080/metrics || exit 1
        curl -f http://localhost:8080/meetings || exit 1

  # ========================================
  # ML MODEL TRAINING & DEPLOYMENT
  # ========================================
  ml-pipeline:
    needs: [lint-and-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up W&B
      env:
        WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
      run: |
        wandb login $WANDB_API_KEY
        
    - name: Train models
      run: |
        python train_custom_models.py
        python train.py
        
    - name: Log models to MLflow
      run: |
        python demo_mlflow_integration.py --log-models
        
    - name: Deploy models to Triton
      run: |
        python demo_nvidia_mlops.py --deploy-models
        
    - name: Update model registry
      run: |
        python mlflow_integration.py --update-registry

  # ========================================
  # MONITORING & ALERTS
  # ========================================
  monitoring:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up monitoring
      run: |
        # Deploy Prometheus and Grafana
        kubectl apply -f monitoring/prometheus.yml
        kubectl apply -f monitoring/rules/alerts.yml
        
    - name: Test monitoring
      run: |
        # Test Prometheus metrics endpoint
        curl -f http://localhost:9090/api/v1/query?query=up || exit 1
        
    - name: Send deployment notification
      run: |
        echo "ðŸš€ Production deployment completed successfully!"
        echo "ðŸ“Š Monitoring dashboard: http://localhost:3000"
        echo "ðŸ“ˆ Metrics endpoint: http://localhost:9090" 