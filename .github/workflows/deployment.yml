name: Deployment Pipeline

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: 'Version to deploy'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ========================================
  # STAGING DEPLOYMENT
  # ========================================
  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl for staging
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        
        # Apply namespace
        kubectl apply -f k8s/namespace.yaml
        
        # Apply configuration
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        
        # Deploy application
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
        
        # Deploy monitoring
        kubectl apply -f monitoring/prometheus.yml
        kubectl apply -f monitoring/rules/alerts.yml
        
    - name: Wait for deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl rollout status deployment/speaking-feedback-app -n speaking-feedback --timeout=300s
        
    - name: Run staging tests
      run: |
        export KUBECONFIG=kubeconfig
        
        # Wait for service to be ready
        kubectl wait --for=condition=ready pod -l app=speaking-feedback-app -n speaking-feedback --timeout=300s
        
        # Test endpoints
        SERVICE_IP=$(kubectl get service speaking-feedback-service -n speaking-feedback -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Health check
        curl -f http://$SERVICE_IP:8080/health || exit 1
        
        # Metrics check
        curl -f http://$SERVICE_IP:8080/metrics || exit 1
        
    - name: Notify staging deployment
      run: |
        echo "✅ Staging deployment completed successfully!"
        echo "🔗 Staging URL: https://staging.speaking-feedback.com"
        echo "📊 Monitoring: https://staging-monitoring.speaking-feedback.com"

  # ========================================
  # PRODUCTION DEPLOYMENT
  # ========================================
  deploy-production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl for production
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        
        # Apply namespace
        kubectl apply -f k8s/namespace.yaml
        
        # Apply configuration
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        
        # Deploy application
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
        
        # Deploy monitoring
        kubectl apply -f monitoring/prometheus.yml
        kubectl apply -f monitoring/rules/alerts.yml
        
    - name: Wait for deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl rollout status deployment/speaking-feedback-app -n speaking-feedback --timeout=300s
        
    - name: Run production tests
      run: |
        export KUBECONFIG=kubeconfig
        
        # Wait for service to be ready
        kubectl wait --for=condition=ready pod -l app=speaking-feedback-app -n speaking-feedback --timeout=300s
        
        # Test all endpoints
        SERVICE_IP=$(kubectl get service speaking-feedback-service -n speaking-feedback -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Health check
        curl -f http://$SERVICE_IP:8080/health || exit 1
        
        # Metrics check
        curl -f http://$SERVICE_IP:8080/metrics || exit 1
        
        # API check
        curl -f http://$SERVICE_IP:8080/meetings || exit 1
        
    - name: Notify production deployment
      run: |
        echo "🚀 Production deployment completed successfully!"
        echo "🔗 Production URL: https://speaking-feedback.com"
        echo "📊 Monitoring: https://monitoring.speaking-feedback.com"

  # ========================================
  # ROLLBACK HANDLER
  # ========================================
  rollback:
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Rollback deployment
      run: |
        # Determine environment
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          ENV="production"
        else
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          ENV="staging"
        fi
        
        export KUBECONFIG=kubeconfig
        
        # Rollback to previous version
        kubectl rollout undo deployment/speaking-feedback-app -n speaking-feedback
        
        echo "🔄 Rolled back $ENV deployment to previous version"
        
    - name: Notify rollback
      run: |
        echo "⚠️ Deployment failed and was rolled back!"
        echo "🔍 Check the logs for the failure reason" 